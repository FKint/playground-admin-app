version: 2.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: fkint/playground-php-app
    docker:
      - image: cimg/base:stable
jobs:
  php-linter:
    docker:
      - image: cimg/php:8.3.0
    resource_class: small
    steps:
      - checkout
      - run: 
          name: Install PHP-CS-Fixer
          command: |
            composer install --working-dir=tools/php-cs-fixer
      - run: 
          name: Run PHP-CS-Fixer
          command: |
            tools/php-cs-fixer/vendor/bin/php-cs-fixer fix --dry-run --diff app
  build-docker-images:
    executor: docker-publisher
    resource_class: small
    steps:
      - setup_remote_docker:
          version: 20.10.11
      - checkout
      - run:
          name: Prepare Circle CI cache
          command: |
            echo "$CIRCLE_BRANCH" > .circle-branch
            echo "$CIRCLE_SHA1" > .circle-sha1
            echo "https://github.com/FKint/playground-admin-app/tree/$CIRCLE_SHA1" > ./app/version_github_link
            cp .circle-sha1 ./app/version_sha1
            date '+%s' > ./app/version_timestamp
      - restore_cache:
          keys:
            - docker-images-2019050400-{{ checksum "docker/Dockerfile" }}-{{ checksum "app/composer.lock" }}-{{ checksum "app/yarn.lock" }}-{{ checksum ".circle-branch" }}
            - docker-images-2019050400-{{ checksum "docker/Dockerfile" }}-{{ checksum "app/composer.lock" }}-{{ checksum "app/yarn.lock" }}
            - docker-images-2019050400-{{ checksum "docker/Dockerfile" }}-{{ checksum "app/composer.lock" }}
            - docker-images-2019050400-{{ checksum "docker/Dockerfile" }}
            - docker-images-2019050400
      - run:
          name: Load cached layers
          command: |
            if [[ -f /tmp/docker-images.tar ]]; then
              echo "Loading cached layers"
              docker load -i /tmp/docker-images.tar
            else
              echo "No cached layers found"
            fi
      - run:
          name: Build Docker Layers
          command: |
            BuildStages=("php-fpm" "composer-builder" "composer-builder-test" "npm-builder" "composer-installer-test" "app-test" "nginx-prod" "nginx-dev" "composer-installer" "app-prod")
            StringOfImagesWithTags=""
            FullCacheString=""
            for stage in ${BuildStages[*]}; do
              FullCacheString="${FullCacheString} --cache-from $IMAGE_NAME:$stage"
              docker build --target $stage $FullCacheString -t $IMAGE_NAME:$stage -f docker/Dockerfile .
              StringOfImagesWithTags="${StringOfImagesWithTags} $IMAGE_NAME:$stage"
            done
            docker save -o /tmp/docker-images.tar $StringOfImagesWithTags
            docker save -o /tmp/docker-app-test.tar $IMAGE_NAME:app-test
            docker save -o /tmp/docker-prod.tar $IMAGE_NAME:app-prod $IMAGE_NAME:nginx-prod
      - save_cache:
          key: docker-images-2019050400-{{ checksum "docker/Dockerfile" }}-{{ checksum "app/composer.lock" }}-{{ checksum "app/yarn.lock" }}-{{ checksum ".circle-branch" }}-{{ checksum ".circle-sha1" }}
          paths:
            - /tmp/docker-images.tar
      - persist_to_workspace:
          root: /tmp
          paths:
            - docker-app-test.tar
            - docker-prod.tar
  publish-latest:
    executor: docker-publisher
    resource_class: small
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker:
          version: 20.10.11
      - run:
          name: Load archived Docker images
          command: docker load -i /tmp/workspace/docker-prod.tar
      - run:
          name: Log in to Docker Hub
          command: echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin
      - run:
          name: Publish Docker images to Docker Hub
          command: |
            docker tag $IMAGE_NAME:app-prod "$IMAGE_NAME:app-prod-$CIRCLE_BRANCH-$CIRCLE_SHA1"
            docker push $IMAGE_NAME:app-prod
            docker push $IMAGE_NAME:app-prod-$CIRCLE_BRANCH-$CIRCLE_SHA1
            docker tag $IMAGE_NAME:nginx-prod "$IMAGE_NAME:nginx-prod-$CIRCLE_BRANCH-$CIRCLE_SHA1"
            docker push $IMAGE_NAME:nginx-prod
            docker push $IMAGE_NAME:nginx-prod-$CIRCLE_BRANCH-$CIRCLE_SHA1
  test:
    executor: docker-publisher
    resource_class: small
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker:
          version: 20.10.11
      - run:
          name: Load archived Docker images
          command: docker load -i /tmp/workspace/docker-app-test.tar
      - run:
          name: Run PHP Unit tests
          command: |
            docker run --name app-test $IMAGE_NAME:app-test vendor/bin/phpunit --log-junit /tmp/phpunit.xml
      - run:
          name: Collect artifacts
          when: always
          command: |
            mkdir -p /tmp/test-results/phpunit
            docker cp app-test:/tmp/phpunit.xml /tmp/test-results/phpunit/results.xml
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: phpunit-data
  test-dusk:
    executor: docker-publisher
    resource_class: small
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker:
          version: 20.10.11
      - run:
          name: Load archived Docker images
          command: docker load -i /tmp/workspace/docker-app-test.tar
      - run:
          name: Prepare setup for Dusk tests
          command: |
            docker network create tmp-dusk-network
            docker run -d --name app-container --network tmp-dusk-network $IMAGE_NAME:app-test php artisan serve --host=app-container
            docker run -d --name selenium --network tmp-dusk-network --shm-size=2g selenium/standalone-chrome:96.0-20211217
            docker exec app-container curl --retry 10 --retry-connrefused http://app-container:8000 > /dev/null
            docker exec app-container curl --retry 10 --retry-connrefused http://selenium:4444 > /dev/null
      - run:
          name: Run Dusk tests
          command: docker exec app-container php artisan dusk --log-junit /tmp/dusk.phpunit.xml
      - run:
          name: Collect artifacts
          when: always
          command: |
            mkdir -p /tmp/dusk
            mkdir -p /tmp/test-results/dusk
            mkdir -p /tmp/logs
            docker logs app-container > /tmp/logs/dusk-logs
            docker logs selenium > /tmp/logs/selenium-logs
            docker cp app-container:/var/www/tests/Browser/screenshots /tmp/dusk/screenshots
            docker cp app-container:/var/www/tests/Browser/console /tmp/dusk/console
            docker cp app-container:/tmp/dusk.phpunit.xml /tmp/test-results/dusk/results.xml
            docker cp app-container:/var/www/storage/logs /tmp/dusk/logs
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: phpunit-data
      - store_artifacts:
          path: /tmp/dusk
          destination: dusk-data
      - store_artifacts:
          path: /tmp/logs
          destination: dusk-logs
workflows:
  version: 2
  build-master:
    jobs:
      - php-linter
      - build-docker-images
      - test:
          requires:
            - build-docker-images
      - test-dusk:
          requires:
            - build-docker-images
      - publish-latest:
          requires:
            - build-docker-images
            - test
            - test-dusk
            - php-linter
          filters:
            branches:
              only: 
                - master
